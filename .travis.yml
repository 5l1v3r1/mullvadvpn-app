sudo: false

git:
  submodules: false

before_install:
  - git submodule update --init

matrix:
  include:
    # GUI - Electron
    - language: node_js
      node_js: '12'
      cache: npm
      services:
        - xvfb
      before_install:
        - npm install -g npm
      install: &node_install
        - npm --version
        - node --version
        - cd gui
        - npm ci --no-optional
      script: &node_script
        - npm run check-format
        - npm run lint
        - npm run build
        - npm test

    - os: windows
      language: node_js
      node_js: '12'
      cache: npm
      before_install:
        # npm fails to upgrade itself if just doing `npm install -g npm`. See this issue:
        # https://travis-ci.community/t/command-npm-i-g-npm-latest-fails/431/5
        - node `npm prefix -g`/node_modules/npm/bin/npm-cli.js i -g npm@latest
      install: *node_install
      script: *node_script

    # Android
    - language: android
      sudo: true
      android:
        components:
          - android-28
          - build-tools-28.0.3
      install:
        - curl https://sh.rustup.rs -sSf | sh -s -- --default-toolchain stable --profile minimal -y
        - source $HOME/.cargo/env
        - rustup target add aarch64-linux-android
        - curl -sf -L -o /tmp/ndk.zip https://dl.google.com/android/repository/android-ndk-r20-linux-x86_64.zip
        - sudo mkdir /opt/android
        - sudo unzip -q -d /opt/android/ /tmp/ndk.zip
        - sudo /opt/android/android-ndk-r20/build/tools/make-standalone-toolchain.sh --platform=android-21 --arch=arm64 --install-dir=/opt/android/toolchains/android21-aarch64
        - |
            curl -sSLO https://github.com/pinterest/ktlint/releases/download/0.34.2/ktlint &&
            chmod a+x ktlint &&
            sudo mv ktlint /usr/local/bin/
        - |
            cat >> $HOME/.cargo/config << EOF
            [target.aarch64-linux-android]
            ar = "/opt/android/android-ndk-r20/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android-ar"
            linker = "/opt/android/android-ndk-r20/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android21-clang"
      before_script:
        - export RUSTFLAGS="--deny unused_imports --deny dead_code"
        - export AR_aarch64_linux_android=/opt/android/toolchains/android21-aarch64/bin/aarch64-linux-android-ar
        - export CC_aarch64_linux_android=/opt/android/toolchains/android21-aarch64/bin/aarch64-linux-android21-clang
        - source env.sh aarch64-linux-android
        - env
      script:
        - cargo build --target aarch64-linux-android --verbose
        - cd android
        - ./gradlew --console plain assembleDebug
        # Run ktlint with extra andorid rules
        - ktlint -a

    # Daemon - macOS
    - language: rust
      rust: stable
      os: osx
      before_script:
        - env
      script:
        - ./ci/ci-rust-script.sh stable

    # Daemon - Linux
    - os: linux
      name: Daemon - nigtly Rust
      language: minimal
      dist: xenial
      services: docker
      before_script: &rust_before_script
        - docker run -d --name mvd-build -v $(pwd):/travis -w /travis  mullvadvpn/mullvadvpn-app-build:latest tail -f /dev/null
        - docker ps
      script:
        - docker exec -t mvd-build bash ci/ci-rust-script.sh nightly

    - os: linux
      name: Daemon - beta Rust
      language: minimal
      dist: xenial
      services: docker
      before_script: *rust_before_script
      script:
        - docker exec -t mvd-build bash ci/ci-rust-script.sh beta

    - os: linux
      name: Daemon - stable Rust
      language: minimal
      dist: xenial
      services: docker
      before_script: *rust_before_script
      script:
        - docker exec -t mvd-build bash ci/ci-rust-script.sh stable

    # Daemon - Windows
    - os: windows
      name: Daemon - stable Rust
      env: RUST_VERSION=stable
      language: bash
      install: &rust_windows_install
        - curl -sSf -o rustup-init.exe https://win.rustup.rs/
        - ./rustup-init.exe -y --default-host x86_64-pc-windows-msvc --default-toolchain $RUST_VERSION --profile minimal
        - export PATH="$HOME/.cargo/bin/:$PATH"
        - export PATH="/c/Program Files (x86)/Microsoft Visual Studio/2017/BuildTools/MSBuild/15.0/Bin/amd64/:$PATH"
      script: &rust_windows_script
        - ./ci/ci-rust-script.sh $RUST_VERSION

    - os: windows
      name: Daemon - beta Rust
      env: RUST_VERSION=beta
      language: bash
      install: *rust_windows_install
      script: *rust_windows_script


notifications:
  email:
    on_success: never
    on_failure: never
